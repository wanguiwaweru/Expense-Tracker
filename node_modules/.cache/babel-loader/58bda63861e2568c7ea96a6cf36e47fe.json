{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sunshine\\\\Desktop\\\\speechly_expense_tracker_project\\\\src\\\\components\\\\Main\\\\Form\\\\Form.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useContext, useEffect } from 'react';\nimport { TextField, Typography, Grid, FormControl, Button, InputLabel, Select, MenuItem } from '@material-ui/core';\nimport { v4 as uuidv4 } from 'uuid';\nimport Snackbar from '../../Snackbar/Snackbar';\nimport formatDate from '../../../utils/formatDate';\nimport { ExpenseTrackerContext } from '../../../context/context';\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\nimport useStyles from './styles';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  amount: '',\n  category: '',\n  type: 'Income',\n  date: formatDate(new Date())\n};\n\nconst NewTransactionForm = () => {\n  _s();\n\n  const classes = useStyles();\n  const {\n    addTransaction\n  } = useContext(ExpenseTrackerContext);\n  const [formData, setFormData] = useState(initialState);\n  const [open, setOpen] = React.useState(false);\n\n  const createTransaction = () => {\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\n\n    if (incomeCategories.map(iC => iC.type).includes(formData.category)) {\n      setFormData({ ...formData,\n        type: 'Income'\n      });\n    } else if (expenseCategories.map(iC => iC.type).includes(formData.category)) {\n      setFormData({ ...formData,\n        type: 'Expense'\n      });\n    }\n\n    setOpen(true);\n    addTransaction({ ...formData,\n      amount: Number(formData.amount),\n      id: uuidv4()\n    });\n    setFormData(initialState);\n  };\n\n  useEffect(() => {\n    if (segment) {\n      if (segment.intent.intent === 'add_expense') {\n        setFormData({ ...formData,\n          type: 'Expense'\n        });\n      } else if (segment.intent.intent === 'add_income') {\n        setFormData({ ...formData,\n          type: 'Income'\n        });\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\n        return createTransaction();\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\n        return setFormData(initialState);\n      }\n\n      segment.entities.forEach(s => {\n        const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\n\n        switch (s.type) {\n          case 'amount':\n            setFormData({ ...formData,\n              amount: s.value\n            });\n            break;\n\n          case 'category':\n            if (incomeCategories.map(iC => iC.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Income',\n                category\n              });\n            } else if (expenseCategories.map(iC => iC.type).includes(category)) {\n              setFormData({ ...formData,\n                type: 'Expense',\n                category\n              });\n            }\n\n            break;\n\n          case 'date':\n            setFormData({ ...formData,\n              date: s.value\n            });\n            break;\n\n          default:\n            break;\n        }\n      });\n\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\n        createTransaction();\n      }\n    }\n  }, [segment]);\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\n  return /*#__PURE__*/_jsxDEV(Grid, {\n    container: true,\n    spacing: 2,\n    children: [/*#__PURE__*/_jsxDEV(Snackbar, {\n      open: open,\n      setOpen: setOpen\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 12,\n      children: /*#__PURE__*/_jsxDEV(Typography, {\n        align: \"center\",\n        variant: \"subtitle2\",\n        gutterBottom: true,\n        children: segment ? /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"segment\",\n          children: segment.words.map(w => w.value).join(\" \")\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 85,\n          columnNumber: 13\n        }, this) : null\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          children: \"Type\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: formData.type,\n          onChange: e => setFormData({ ...formData,\n            type: e.target.value\n          }),\n          children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Income\",\n            children: \"Income\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 95,\n            columnNumber: 13\n          }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: \"Expense\",\n            children: \"Expense\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 96,\n            columnNumber: 13\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(FormControl, {\n        fullWidth: true,\n        children: [/*#__PURE__*/_jsxDEV(InputLabel, {\n          children: \"Category\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Select, {\n          value: formData.category,\n          onChange: e => setFormData({ ...formData,\n            category: e.target.value\n          }),\n          children: selectedCategories.map(c => /*#__PURE__*/_jsxDEV(MenuItem, {\n            value: c.type,\n            children: c.type\n          }, c.type, false, {\n            fileName: _jsxFileName,\n            lineNumber: 104,\n            columnNumber: 44\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 103,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        type: \"number\",\n        label: \"Amount\",\n        value: formData.amount,\n        onChange: e => setFormData({ ...formData,\n          amount: e.target.value\n        }),\n        fullWidth: true\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 109,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Grid, {\n      item: true,\n      xs: 6,\n      children: /*#__PURE__*/_jsxDEV(TextField, {\n        fullWidth: true,\n        label: \"Date\",\n        type: \"date\",\n        value: formData.date,\n        onChange: e => setFormData({ ...formData,\n          date: formatDate(e.target.value)\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Button, {\n      className: classes.button,\n      variant: \"outlined\",\n      color: \"primary\",\n      fullWidth: true,\n      onClick: createTransaction,\n      children: \"Create\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 115,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n};\n\n_s(NewTransactionForm, \"Ijt6nxAPsv8kWZ43lG4oX5jQMus=\", false, function () {\n  return [useStyles];\n});\n\n_c = NewTransactionForm;\nexport default NewTransactionForm;\n\nvar _c;\n\n$RefreshReg$(_c, \"NewTransactionForm\");","map":{"version":3,"sources":["C:/Users/Sunshine/Desktop/speechly_expense_tracker_project/src/components/Main/Form/Form.jsx"],"names":["React","useState","useContext","useEffect","TextField","Typography","Grid","FormControl","Button","InputLabel","Select","MenuItem","v4","uuidv4","Snackbar","formatDate","ExpenseTrackerContext","incomeCategories","expenseCategories","useStyles","initialState","amount","category","type","date","Date","NewTransactionForm","classes","addTransaction","formData","setFormData","open","setOpen","createTransaction","Number","isNaN","includes","map","iC","id","segment","intent","isFinal","entities","forEach","s","value","charAt","slice","toLowerCase","selectedCategories","words","w","join","e","target","c","button"],"mappings":"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","sourcesContent":["import React, { useState, useContext, useEffect } from 'react';\r\nimport { TextField, Typography, Grid, FormControl, Button, InputLabel, Select, MenuItem } from '@material-ui/core';\r\nimport { v4 as uuidv4 } from 'uuid';\r\nimport Snackbar from '../../Snackbar/Snackbar';\r\nimport formatDate from '../../../utils/formatDate';\r\nimport { ExpenseTrackerContext } from '../../../context/context';\r\nimport { incomeCategories, expenseCategories } from '../../../constants/categories';\r\nimport useStyles from './styles';\r\n\r\nconst initialState = {\r\n  amount: '',\r\n  category: '',\r\n  type: 'Income',\r\n  date: formatDate(new Date()),\r\n};\r\n\r\nconst NewTransactionForm = () => {\r\n  const classes = useStyles();\r\n  const { addTransaction } = useContext(ExpenseTrackerContext);\r\n  const [formData, setFormData] = useState(initialState);\r\n  const [open, setOpen] = React.useState(false);\r\n\r\n  const createTransaction = () => {\r\n    if (Number.isNaN(Number(formData.amount)) || !formData.date.includes('-')) return;\r\n\r\n    if (incomeCategories.map((iC) => iC.type).includes(formData.category)) {\r\n      setFormData({ ...formData, type: 'Income' });\r\n    } else if (expenseCategories.map((iC) => iC.type).includes(formData.category)) {\r\n      setFormData({ ...formData, type: 'Expense' });\r\n    }\r\n\r\n    setOpen(true);\r\n    addTransaction({ ...formData, amount: Number(formData.amount), id: uuidv4() });\r\n    setFormData(initialState);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (segment) {\r\n      if (segment.intent.intent === 'add_expense') {\r\n        setFormData({ ...formData, type: 'Expense' });\r\n      } else if (segment.intent.intent === 'add_income') {\r\n        setFormData({ ...formData, type: 'Income' });\r\n      } else if (segment.isFinal && segment.intent.intent === 'create_transaction') {\r\n        return createTransaction();\r\n      } else if (segment.isFinal && segment.intent.intent === 'cancel_transaction') {\r\n        return setFormData(initialState);\r\n      }\r\n\r\n      segment.entities.forEach((s) => {\r\n        const category = `${s.value.charAt(0)}${s.value.slice(1).toLowerCase()}`;\r\n\r\n        switch (s.type) {\r\n          case 'amount':\r\n            setFormData({ ...formData, amount: s.value });\r\n            break;\r\n          case 'category':\r\n            if (incomeCategories.map((iC) => iC.type).includes(category)) {\r\n              setFormData({ ...formData, type: 'Income', category });\r\n            } else if (expenseCategories.map((iC) => iC.type).includes(category)) {\r\n              setFormData({ ...formData, type: 'Expense', category });\r\n            }\r\n            break;\r\n          case 'date':\r\n            setFormData({ ...formData, date: s.value });\r\n            break;\r\n          default:\r\n            break;\r\n        }\r\n      });\r\n\r\n      if (segment.isFinal && formData.amount && formData.category && formData.type && formData.date) {\r\n        createTransaction();\r\n      }\r\n    }\r\n  }, [segment]);\r\n\r\n  const selectedCategories = formData.type === 'Income' ? incomeCategories : expenseCategories;\r\n\r\n  return (\r\n    <Grid container spacing={2}>\r\n      <Snackbar open={open} setOpen={setOpen} />\r\n      <Grid item xs={12}>\r\n        <Typography align=\"center\" variant=\"subtitle2\" gutterBottom>\r\n          {segment ? (\r\n            <div className=\"segment\">\r\n              {segment.words.map((w) => w.value).join(\" \")}\r\n            </div>\r\n          ) : null}\r\n        </Typography>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Type</InputLabel>\r\n          <Select value={formData.type} onChange={(e) => setFormData({ ...formData, type: e.target.value })}>\r\n            <MenuItem value=\"Income\">Income</MenuItem>\r\n            <MenuItem value=\"Expense\">Expense</MenuItem>\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <FormControl fullWidth>\r\n          <InputLabel>Category</InputLabel>\r\n          <Select value={formData.category} onChange={(e) => setFormData({ ...formData, category: e.target.value })}>\r\n            {selectedCategories.map((c) => <MenuItem key={c.type} value={c.type}>{c.type}</MenuItem>)}\r\n          </Select>\r\n        </FormControl>\r\n      </Grid>\r\n\r\n      <Grid item xs={6}>\r\n        <TextField type=\"number\" label=\"Amount\" value={formData.amount} onChange={(e) => setFormData({ ...formData, amount: e.target.value })} fullWidth />\r\n      </Grid>\r\n      <Grid item xs={6}>\r\n        <TextField fullWidth label=\"Date\" type=\"date\" value={formData.date} onChange={(e) => setFormData({ ...formData, date: formatDate(e.target.value) })} />\r\n      </Grid>\r\n      <Button className={classes.button} variant=\"outlined\" color=\"primary\" fullWidth onClick={createTransaction}>Create</Button>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default NewTransactionForm;\r\n"]},"metadata":{},"sourceType":"module"}