"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HintCallout = void 0;
var react_client_1 = require("@speechly/react-client");
var react_1 = __importStar(require("react"));
var types_1 = require("../types");
var Callout_1 = require("./Callout");
var HintCallout = function (props) {
    var _a = react_1.useState(false), visible = _a[0], setVisible = _a[1];
    var timeout = react_1.useRef(null);
    var SHORT_PRESS_TRESHOLD_MS = 600;
    var INSTRUCTION_PREROLL_MS = 500;
    var INSTRUCTION_SHOW_TIME_MS = 3000;
    react_1.useEffect(function () {
        var subTangentPress = PubSub.subscribe(types_1.SpeechlyUiEvents.TangentPress, function (message, payload) {
            // console.log('TangentPress', payload.state)
            hideHints();
        });
        var subTangentClick = PubSub.subscribe(types_1.SpeechlyUiEvents.TangentRelease, function (message, payload) {
            // console.log('TangentRelease ', payload.state, payload.timeMs)
            // Detect short record button presses
            if (payload.timeMs < SHORT_PRESS_TRESHOLD_MS) {
                switch (payload.state) {
                    case react_client_1.SpeechState.Ready:
                    case react_client_1.SpeechState.Recording:
                    case react_client_1.SpeechState.Loading:
                        if (timeout.current === null) {
                            timeout.current = window.setTimeout(function () {
                                setVisible(true);
                                timeout.current = window.setTimeout(function () {
                                    setVisible(false);
                                    timeout.current = null;
                                }, INSTRUCTION_SHOW_TIME_MS);
                            }, INSTRUCTION_PREROLL_MS);
                        }
                }
            }
        });
        return function () {
            PubSub.unsubscribe(subTangentPress);
            PubSub.unsubscribe(subTangentClick);
        };
    }, []);
    var hideHints = function () {
        setVisible(false);
        if (timeout.current !== null) {
            clearTimeout(timeout.current);
            timeout.current = null;
        }
    };
    return react_1.default.createElement(Callout_1.Callout, { sourceAnchors: { x: '50%', y: '6%' }, visible: visible, onClick: function () { return hideHints(); } }, "Hold to talk");
};
exports.HintCallout = HintCallout;
//# sourceMappingURL=HintCallout.js.map